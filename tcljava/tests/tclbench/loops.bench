# Iterate over lists with for
proc loops-for-list {list} {
    set len [llength $list]
    for {set i 0} {$i < $len} {incr i} {
	set var [lindex $list $i]
    }
}

# Iterate over list with for, this test differs from the one
# above because the for loop body contains multiple commands
# which tests reparsing of the loop body.

proc loops-for-list-ten {list} {
    set len [llength $list]
    for {set i 0} {$i < $len} {incr i} {
	set v1 [lindex $list $i]
	set v2 $v1
	set v3 $v2
	set v4 $v3
	set v5 $v4
	set v6 $v5
	set v7 $v6
	set v8 $v7
	set v9 $v8
	set v10 $v9
    }
}


# Iterate over lists with foreach
proc loops-foreach-list {list} {
    foreach elem $list {
	set var $elem
    }
}

proc loops-foreach-list-ten {list} {
    foreach elem $list {
	set v1 $elem
	set v2 $v1
	set v3 $v2
	set v4 $v3
	set v5 $v4
	set v6 $v5
	set v7 $v6
	set v8 $v7
	set v9 $v8
	set v10 $v9
    }
}

# Looping with for
proc loops-foo-num {size} {
    for {set i 0} {$i < $size} {incr i} {
	set bogus abc
    }
}



# Looping with while
proc loops-while-num {size} {
    set i 0
    while {$i < $size} {
	set bogus abc
	incr i
    }
}

proc loops-while-num-ten {size} {
    set i 0
    while {$i < $size} {
	set bogus abc
	incr i

	set v1 $bogus
	set v2 $v1
	set v3 $v2
	set v4 $v3
	set v5 $v4
	set v6 $v5
	set v7 $v6
	set v8 $v7
	set v9 $v8
	set v10 $v9
    }
}


# Looping with while
proc loops-while-1 {size} {
    set i 0
    while {1} {
	if {[incr i] > $size} { break }
    }
}

proc loops-while-1-ten {size} {
    set i 0
    while {1} {
	if {[incr i] > $size} { break }

	set v1 1
	set v2 $v1
	set v3 $v2
	set v4 $v3
	set v5 $v4
	set v6 $v5
	set v7 $v6
	set v8 $v7
	set v9 $v8
	set v10 $v9
    }
}


# iterate over chars in string using [string index]
proc loops-for-string-index {s} {
    set len [string length $s]
    for {set i 0} {$i < $len} {incr i} {
        set var [string index $s $i]
    }
}

# iterate over chars in string using [foreach] and [split]
proc loops-foreach-split-every-char {s} {
    foreach c [split $s {}] {
	set var $c
    }
}

# split a string of characters over and over again to
# get timing results for the split command.

proc loops-split-every-char {s} {
    split $s {}
    split $s {}
    split $s {}
    split $s {}
    split $s {}
}

# iterate over split string using foreach, split on one char.
proc loops-foreach-split-char { str } {
    foreach c [split $str "\n"] {
	set var $c
    }
}

# split a string of characters over and over again to
# get timing results for the split command.

proc loops-split-char {s} {
    split $s "\n"
    split $s "\n"
    split $s "\n"
    split $s "\n"
    split $s "\n"
}

# iterate over split string using foreach, split on default chars.
proc loops-foreach-split-char-def { str } {
    foreach c [split $str] {
	set var $c
    }
}

# split a string of characters over and over again to
# get timing results for the split command.

proc loops-split-char-def {s} {
    split $s
    split $s
    split $s
    split $s
    split $s
}


set list {}
set string ""
set size 500
for {set i 0} {$i < $size} {incr i} {
    lappend list $i
    append string "0"
}

set newlinestr [string repeat \
    "ONETWOTHREE\n54985348543538434535435\nxysssksdalsdjjalsk\n" 500]

bench -desc "loops-for-list" \
	-body {loops-for-list $list}
bench -desc "loops-for-list-ten" \
	-body {loops-for-list-ten $list}

bench -desc "loops-foreach-list" \
	-body {loops-foreach-list $list}
bench -desc "loops-foreach-list-ten" \
	-body {loops-foreach-list-ten $list}

bench -desc "loops-foo-num-$size" \
	-body {loops-foo-num $size}

bench -desc "loops-while-num-$size" \
	-body {loops-while-num $size}
bench -desc "loops-while-num-ten-$size" \
	-body {loops-while-num-ten $size}

bench -desc "loops-while-1-$size" \
	-body {loops-while-1 $size}
bench -desc "loops-while-1-ten-$size" \
	-body {loops-while-1-ten $size}

bench -desc "loops-for-string-index" \
      -body {loops-for-string-index $string}

bench -desc "loops-foreach-split-every-char" \
      -body {loops-foreach-split-every-char $string}

bench -desc "loops-split-every-char" \
      -body {loops-split-every-char $string}

bench -desc "loops-foreach-split-char" \
      -body {loops-foreach-split-char $newlinestr}

bench -desc "loops-split-char" \
      -body {loops-split-char $newlinestr}

bench -desc "loops-foreach-split-char-def" \
      -body {loops-foreach-split-char-def $newlinestr}

bench -desc "loops-split-char-def" \
      -body {loops-split-char-def $newlinestr}

