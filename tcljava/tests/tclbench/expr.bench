proc expr-unbraced {a} {
    set b 23
    set c 4
    set d 6
    set e 7
    expr $a*$b+log($c)-pow($d,$e)
    expr $a*$b+log($c)-pow($d,$e)
}
proc expr-braced {a} {
    set b 23
    set c 4
    set d 6
    set e 7
    expr {$a*$b+log($c)-pow($d,$e)}
    expr {$a*$b+log($c)-pow($d,$e)}
}

proc expr-evaluate-one {a} {
    # This test will evaluate an argument object
    # as an expr value. This test could parse
    # the argument object from a string and
    # change the internal rep to a numeric type.
    expr {$a}
}

proc expr-evaluate-add-ten {a} {
    # This test will evaluate the same argument object ten
    # times. The expr layer should parse the object into
    # a numeric internal rep the first time $a is read.
    # Each read that follows should use the parsed
    # numeric internal rep. If this logic is not implemented,
    # then this test will not execute quickly because
    # the integer values are parsed from the string each time.

    expr {$a + $a + $a + $a + $a + $a + $a + $a + $a + $a}
}
proc expr-evaluate-add-fifty {a} {
    # Same as above except that many more evaluations are done.
    expr {$a + $a + $a + $a + $a + $a + $a + $a + $a + $a + \
          $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + \
          $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + \
          $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + \
          $a + $a + $a + $a + $a + $a + $a + $a + $a + $a}
}

proc expr-evaluate-add-fifty-fifty {a} {
    for {set i 0} {$i < 50} {incr i} {
        expr {$a + $a + $a + $a + $a + $a + $a + $a + $a + $a + \
          $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + \
          $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + \
          $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + \
          $a + $a + $a + $a + $a + $a + $a + $a + $a + $a}
    }
}

proc expr-incr-incr {value} {
    incr value
}
proc expr-incr-expr {value} {
    expr {$value + 1}
}
proc expr-streq {a b} {
    expr {$a == $b}; expr {$a == $b}; expr {$a == $b}; expr {$a == $b}
}
proc expr-strneq {a b} {
    expr {$a != $b}; expr {$a != $b}; expr {$a != $b}; expr {$a != $b}
}

proc expr-big {} {
    expr {
        1.0 + 5 /
        (100 * 3000) +
        11 + (5000 % 2) + (2135 / 3) -
        16 - 17 - 22.0 +
        double(1) + int(10.0) -
        100 * 5.5 +
        ((123&321) | 0xF4) +
        (~0 / 2) *
        11.0 +
        (1<<31)/16 +
        round(1.4)
    }
}

# Compare a string to the empty string constant.

proc expr-empty-string {} {
    set a "HI"
    set l [list]

    expr {$a == ""}
    expr {$a == ""}
    expr {$a == ""}
    expr {$a == ""}
    expr {$a == ""}

    expr {$l == {}}
    expr {$l == {}}
    expr {$l == {}}
    expr {$l == {}}
    expr {$l == {}}
}

proc expr-empty-string-loop {} {
    set a ""
    for {set i 0} {$i < 1000} {incr i} {
        expr {$a == ""}
    }
    return
}

proc expr-empty-string-eq-loop {} {
    set a ""
    for {set i 0} {$i < 1000} {incr i} {
        expr {$a eq ""}
    }
    return
}

# This next test compares two objects,
# both are parsed into expr value objects.
# The expr does not know that the second
# argument is a string type like in the
# two tests above.

proc expr-empty-string-two-obj-loop {} {
    set a ""
    set b ""
    for {set i 0} {$i < 1000} {incr i} {
        expr {$a == $b}
    }
    return
}

# This next test compares two objects,
# the objects are not parsed since the
# string compare eq operator skips
# the parse step.

proc expr-empty-string-two-obj-eq-loop {} {
    set a ""
    set b ""
    for {set i 0} {$i < 1000} {incr i} {
        expr {$a eq $b}
    }
    return
}


# Negate compare a string to the empty string constant. 

proc expr-empty-not-string {} {
    set a "HI"
    set l [list]

    expr {$a != ""}
    expr {$a != ""}
    expr {$a != ""}
    expr {$a != ""}
    expr {$a != ""}

    expr {$l != {}}
    expr {$l != {}}
    expr {$l != {}}
    expr {$l != {}}
    expr {$l != {}}
}

# Compare to constant string

proc expr-equal-constant-string {} {
    set a "HELLO"
    expr {$a == "Y"}
    expr {$a == "YO"}
    expr {$a == "YOYO"}
    expr {$a == "YOYOYO"}
    expr {$a == "YOYOYO"}
}

# Compare to same constant string, this
# might not show much improvement if
# a char compare is done vs a direct
# string object compare.

proc expr-equal-same-constant-string {} {
    set a "HELLO"
    expr {$a == "HELLO" || $a == "HELLO"}
    expr {$a == "HELLO" || $a == "HELLO"}
    expr {$a == "HELLO" || $a == "HELLO"}
    expr {$a == "HELLO" || $a == "HELLO"}
    expr {$a == "HELLO" || $a == "HELLO"}
}

# Compare to same constant string, this
# should show a significant improvement
# if a direct object compare is used
# instead of a char compare.

proc expr-equal-same-big-constant-string {} {
    set a "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"
    expr {$a|| $a}
    expr {$a|| $a}
    expr {$a|| $a}
    expr {$a|| $a}
    expr {$a|| $a}
}

# Compare constant string in variable to constant string. Do this a number of
# times so that the expr evaluation time is significant as compared to the
# time required to just invoke the command.

proc expr-equal-same-char-string {} {
    set a "a"
    expr { \
        ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && \
        ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && \
        ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && \
        ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") \
    }
}

proc expr-equal-same-char-string-parse {} {
    set a "a"
    expr { \
        ($a == "a") && ($a == "a") && ($a == "a") && ($a == "a") && ($a == "a") && \
        ($a == "a") && ($a == "a") && ($a == "a") && ($a == "a") && ($a == "a") && \
        ($a == "a") && ($a == "a") && ($a == "a") && ($a == "a") && ($a == "a") && \
        ($a == "a") && ($a == "a") && ($a == "a") && ($a == "a") && ($a == "a") \
    }
}

# Compare constant string for char to constant string.

proc expr-equal-same-char-string-index {} {
    set a [string index "abc" 0]
    expr { \
        ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && \
        ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && \
        ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && \
        ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") && ($a eq "a") \
    }
}

# This next test compares two objects that
# contain strings that can't be parsed into
# either integers or doubles. This tests
# how quickly the expr module is able to
# determine that a string is not either
# a double or an integer.

proc expr-equal-same-string-two-obj-loop {} {
    set a "abc"
    set b "abc"
    for {set i 0} {$i < 1000} {incr i} {
        expr {$a == $b}
    }
    return
}

# This test is like expr-equal-same-string-two-obj-loop
# except the two strings are not the same. If expr
# has been optimized to check for the same
# TclObject as each operand or the same
# String object inside the operands then
# this test could execute less quickly
# than expr-equal-same-string-two-obj-loop.

proc expr-equal-not-same-string-two-obj-loop {} {
    set a "abc"
    set b "defg"
    for {set i 0} {$i < 1000} {incr i} {
        expr {$a == $b}
    }
    return
}

# This test compares two objects using the
# 'eq' operator. This test should show
# that the eq operator is faster than ==
# since the logic does not attempt to
# parse the TclObject as an int or double
# before doing a string compare.

proc expr-equal-same-string-two-obj-eq-loop {} {
    set a "abc"
    set b "abc"
    for {set i 0} {$i < 1000} {incr i} {
        expr {$a eq $b}
    }
    return
}

# This test is like expr-equal-same-string-two-obj-eq-loop
# except the two strings are not the same. If expr
# has been optimized to check for the same
# TclObject as each operand or the same
# String object inside the operands then
# this test could execute less quickly
# than expr-equal-same-string-two-obj-eq-loop.

proc expr-equal-not-same-string-two-obj-eq-loop {} {
    set a "abc"
    set b "defg"
    for {set i 0} {$i < 1000} {incr i} {
        expr {$a eq $b}
    }
    return
}

# Compare an object that contains an int to a constant int value.

proc expr-equal-constant-int {} {
    set a 10
    expr {$a == 0}
    expr {$a == 0}
    expr {$a == 0}
    expr {$a == 0}
    expr {$a == 0}
}

# Compare an object to a constant int value in the loop test condition.

proc expr-equal-constant-int-loop {} {
    set sum 0
    for {set i 0} {$i < 1000} {incr i} {
        incr sum $i
    }
    return
}

proc expr-bigsqrt1 { y } {
    # Initial estimate of 1/sqrt(y) to 2 decimal places.
    set est [expr {1 / sqrt($y)}]
    set ipart [expr {int($est)}]
    set fpart [expr {$est - $ipart}]
    set fpart [string range $fpart 2 3]
    set est "${ipart}.${fpart}"

    # Run a couple of iterations
    set x $est
    set z [expr {$y * 0.5}]
    for {set i 0} {$i < 4} {incr i} {
        set x [expr {(1.5*$x) - ($x*$x)*($x*$z)}]
    }
    return [expr {$x * $y}]
}

proc expr-bigsqrt2 { num } {
    set epsilon .0001

    set ans [expr {1 << int((log($num)/log(2) / 2))}] ;# Initial guess
    while {1} {
        set last $ans
        set ans [expr {(($num / $ans) + $ans) / 2.0}]
        if {abs($last - $ans) < $epsilon} break
    }
    # Trim to integer part if number is between
    # integer and (integer + epsilon).
    set ipart [expr {int($ans)}]
    set sepsilon $epsilon
    if {$num < 0} {
        set sepsilon [expr {-1 * $epsilon}]
    }
    if {($ipart < $ans) && (($ipart + $sepsilon) > $ans)} {
        set ans [expr {double($ipart)}]
    }
    return $ans
}

# Use if command to query boolean values from variables
# in a loop. The if command makes use of an optimized
# expr boolean query method.

proc expr-if-branch-loop {} {
    set v1 0
    set v2 0
    set v3 0

    set i 0
    while {1} {
        # All 4 expr boolean query operations should return
        # false, until the loop ends.

        if {$v1} {
            set v1 0
        } elseif {$v2} {
            set v2 0
        } elseif {$v3} {
            set v3 0
        }

        if {$i > 500} {
            break
        }
        incr i
    }
    return
}

# Set the interp result to an int value over
# and over again in a loop. This test the
# time needed to read a value and set the
# result to an int. Note that the expr
# command always sets the interp result,
# if the result is not saved into a variable
# or is not the last command in a block.

proc expr-set-result-int-loop {} {
    set sum 0
    for {set i 0} {$i < 5000} {incr i} {
        expr {$i}
    }
    return
}

proc expr-set-result-double-loop {} {
    set sum 0
    for {set i 0} {$i < 5000} {incr i} {
        expr {double($i)}
    }
    return
}

proc expr-set-result-string-loop {} {
    set sum 0
    for {set i 0} {$i < 5000} {incr i} {
        expr {(1 ? "hello" : "bye")}
    }
    return
}


# This test checks the unary not operator
# applied to a constant int or double value.
# The compiler does not attempt evaluate
# this operation at compile time since
# it is unlikely to be used in that way.
# This compiler may inline specific
# logic for the int type. These results
# can be compared to the string literal
# which is passed to the runtime expr method.

proc expr-unary-not-int-literal {} {
    for {set i 1000} {$i} {incr i -1} {
        expr {!1}
    }
    return
}

proc expr-unary-not-double-literal {} {
    for {set i 1000} {$i} {incr i -1} {
        expr {!1.0}
    }
    return
}

proc expr-unary-not-string-literal {} {
    for {set i 1000} {$i} {incr i -1} {
        expr {!"true"}
    }
    return
}

# This test applies a not operator to
# the result of a subexpression evaluation.
# The result is an integer, so an optimized
# execution path may be used.

proc expr-unary-not-int-literal-subexpr {} {
    for {set i 1000} {$i} {incr i -1} {
        expr {!(1 ? 1 : 0)}
    }
    return
}

proc expr-unary-not-double-literal-subexpr {} {
    for {set i 1000} {$i} {incr i -1} {
        expr {!(1 ? 1.0 : 0.0)}
    }
    return
}

proc expr-unary-not-string-literal-subexpr {} {
    for {set i 1000} {$i} {incr i -1} {
        expr {!(1 ? "true" : "false")}
    }
    return
}

# This test applies a not operator to
# a TclObject operand. An optimized
# execution path may be used when
# the TclObject is an int or double.

proc expr-unary-not-int-tclobject {} {
    set v 1
    for {set i 1000} {$i} {incr i -1} {
        expr {!$v}
    }
    return
}

proc expr-unary-not-double-tclobject {} {
    set v 1.0
    for {set i 1000} {$i} {incr i -1} {
        expr {!$v}
    }
    return
}

proc expr-unary-not-string-tclobject {} {
    set v "true"
    for {set i 1000} {$i} {incr i -1} {
        expr {!$v}
    }
    return
}

# This test applies a not operator to
# a TclObject operand that needs to
# be parsed into either an int or
# double internal rep. Only the first
# iteration of this loop should
# reparse, so this method should
# be about as fast as the ones above.

proc expr-unary-not-int-tclobject-parse {} {
    set v [string range "1" 0 end]
    for {set i 1000} {$i} {incr i -1} {
        expr {!$v}
    }
    return
}

proc expr-unary-not-double-tclobject-parse {} {
    set v [string range "1.0" 0 end]
    for {set i 1000} {$i} {incr i -1} {
        expr {!$v}
    }
    return
}

# These tests invoke the not operator inside
# an if expression that evaluates to a boolean.

proc expr-boolean-unary-not-int-literal {} {
    set v 0

    for {set i 1000} {$i} {incr i -1} {
        if {!1} {
            set v 0
        } else {
            set v 1
        }
    }
    return
}

proc expr-boolean-unary-not-double-literal {} {
    set v 0

    for {set i 1000} {$i} {incr i -1} {
        if {!1.0} {
            set v 0
        } else {
            set v 1
        }
    }
    return
}

proc expr-boolean-unary-not-int-literal-subexpr {} {
    set v 0

    for {set i 1000} {$i} {incr i -1} {
        if {!(1 ? 1 : 0)} {
            set v 0
        } else {
            set v 1
        }
    }
    return
}

proc expr-boolean-unary-not-int-tclobject {} {
    set v 0

    for {set i 1000} {$i} {incr i -1} {
        if {!$v} {
            set v 0
        } else {
            set v 1
        }
    }
    return
}

proc expr-boolean-unary-not-double-tclobject {} {
    set v 0.0

    for {set i 1000} {$i} {incr i -1} {
        if {!$v} {
            set v 0
        } else {
            set v 1
        }
    }
    return
}


# Invoke each expr math func in a loop.

proc expr-math-funcs {} {
    for {set i 50} {$i} {incr i -1} {
        # All the supported math functions in alpha order
        expr {abs(0.0) + acos(0.0) + asin(0.0) + atan(0.0) + atan2(-0.5, 0.5) \
        + ceil(0.0) + cos(0.0) + cosh(0.0) \
        + double(0) + exp(1) + floor(0.0) + fmod(1.0, 1.0) \
        + hypot(1, 1) + int(0.0) + log(1.0) + log10(1.0) \
        + pow(2,3) + rand() + round(1.0) + sin(0.0) \
        + sinh(0) + sqrt(1) + srand(1) + tan(1.0) + tanh(1.0)}
    }
    return
}


if { [catch {string repeat "abc" 10}] } {
    proc str-repeat {str num} {
	set val {}
	for {set i 0} {$i < $num} {incr i} { append val $str }
	return $val
    }
} else {
    proc str-repeat {str num} { string repeat $str $num }
}
set base [str-repeat a 100]
set str1 "$base abc"
set str2 "$base cde"
set str3 "$base f"

bench -desc "expr-streq-a-eq-b-eq-len" -body {expr-streq $str1 $str2}
bench -desc "expr-strneq-a-neq-b-eq-len" -body {expr-strneq $str1 $str2}
bench -desc "expr-streq-a-eq-b-neq-len" -body {expr-streq $str1 $str3}

bench -desc "expr-streq-a-neq-b-neq-len" -body {expr-strneq $str1 $str3}
bench -desc "expr-streq-a-eq-b" -body {expr-streq 100 200}
bench -desc "expr-streq-a-neq-b" -body {expr-strneq 100 200}
bench -desc "expr-unbraced" -body {expr-unbraced 12}
bench -desc "expr-braced" -body {expr-braced 12}

bench -desc "expr-inline" -body {
    set a 12
    set b 23
    set c 4
    set d 6
    set e 7
    expr {$a*$b+log($c)-pow($d,$e)}
}

bench -desc "expr-evaluate-one_int" -body {expr-evaluate-one 1}
bench -desc "expr-evaluate-add-ten_int" -body {expr-evaluate-add-ten 1}

bench -desc "expr-evaluate-add-fifty_int_easy" -body {expr-evaluate-add-fifty 1}

# Unlike the test above, the number passed in can't be easily special cased.
# Passing a trivial int could lead to confusing results because it would seem
# like reparsing the string each time was not taking much longer than
# changing the internal rep of the object. The same goes for double parsing.

bench -desc "expr-evaluate-add-fifty_int_hard" -body {expr-evaluate-add-fifty 18853837}
bench -desc "expr-evaluate-add-fifty_fifty_int_hard" -body {expr-evaluate-add-fifty-fifty 18853837}

# This test passes an object that is already an integer so no parse is needed.

set expr_int_obj [expr {int(50)}]

bench -desc "expr-evaluate-add-fifty_int_obj" -body {expr-evaluate-add-fifty $expr_int_obj}

bench -desc "expr-evaluate-one_double" -body {expr-evaluate-one 1.0}
bench -desc "expr-evaluate-add-ten_double" -body {expr-evaluate-add-ten 1.0}

bench -desc "expr-evaluate-add-fifty_double_easy" -body {expr-evaluate-add-fifty 1.0}
bench -desc "expr-evaluate-add-fifty_double_hard" -body {expr-evaluate-add-fifty 123.78964e-4}
bench -desc "expr-evaluate-add-fifty_fifty_double_hard" -body {expr-evaluate-add-fifty-fifty 123.78964e-4}

set expr_double_obj [expr {double(123.78964e-4)}]
bench -desc "expr-evaluate-add-fifty_double_obj" -body {expr-evaluate-add-fifty $expr_double_obj}


bench -desc "expr-incr-with-incr" -body {expr-incr-incr 1}
bench -desc "expr-incr-with-expr" -body {expr-incr-expr 1}
bench -desc "expr-big-expression" -body {expr-big}

bench -desc "expr-empty-string" -body {expr-empty-string}
bench -desc "expr-empty-string-loop" -body {expr-empty-string-loop}
bench -desc "expr-empty-string-eq-loop" -body {expr-empty-string-eq-loop}

bench -desc "expr-empty-string-two-obj-loop" -body {expr-empty-string-two-obj-loop}
bench -desc "expr-empty-string-two-obj-eq-loop" -body {expr-empty-string-two-obj-eq-loop}

bench -desc "expr-empty-not-string" -body {expr-empty-not-string}

bench -desc "expr-equal-same-constant-string" \
    -body {expr-equal-same-constant-string}

bench -desc "expr-equal-same-big-constant-string" \
    -body {expr-equal-same-big-constant-string}

bench -desc "expr-equal-same-char-string-parse" \
    -body {expr-equal-same-char-string-parse}

bench -desc "expr-equal-same-char-string" \
    -body {expr-equal-same-char-string}

bench -desc "expr-equal-same-char-string-index" \
    -body {expr-equal-same-char-string-index}


bench -desc "expr-equal-same-string-two-obj-loop" \
    -body {expr-equal-same-string-two-obj-loop}

bench -desc "expr-equal-not-same-string-two-obj-loop" \
    -body {expr-equal-not-same-string-two-obj-loop}

bench -desc "expr-equal-same-string-two-obj-eq-loop" \
    -body {expr-equal-same-string-two-obj-eq-loop}

bench -desc "expr-equal-not-same-string-two-obj-eq-loop" \
    -body {expr-equal-not-same-string-two-obj-eq-loop}


bench -desc "expr-equal-constant-int" -body {expr-equal-constant-int}
bench -desc "expr-equal-constant-int-loop" -body {expr-equal-constant-int-loop}

bench -desc "expr-bigsqrt1-1" -body {expr-bigsqrt1 36}
bench -desc "expr-bigsqrt1-2" -body {expr-bigsqrt1 121}
bench -desc "expr-bigsqrt2-1" -body {expr-bigsqrt2 36}
bench -desc "expr-bigsqrt2-2" -body {expr-bigsqrt2 121}

bench -desc "expr-if-branch-loop" -body {expr-if-branch-loop}

bench -desc "expr-set-result-int-loop" -body {expr-set-result-int-loop}
bench -desc "expr-set-result-double-loop" -body {expr-set-result-double-loop}
bench -desc "expr-set-result-string-loop" -body {expr-set-result-string-loop}

bench -desc "expr-unary-not-int-literal" -body {expr-unary-not-int-literal}
bench -desc "expr-unary-not-double-literal" -body {expr-unary-not-double-literal}
bench -desc "expr-unary-not-string-literal" -body {expr-unary-not-string-literal}

bench -desc "expr-unary-not-int-literal-subexpr" -body {expr-unary-not-int-literal-subexpr}
bench -desc "expr-unary-not-double-literal-subexpr" -body {expr-unary-not-double-literal-subexpr}
bench -desc "expr-unary-not-string-literal-subexpr" -body {expr-unary-not-string-literal-subexpr}

bench -desc "expr-unary-not-int-tclobject" -body {expr-unary-not-int-tclobject}
bench -desc "expr-unary-not-double-tclobject" -body {expr-unary-not-double-tclobject}
bench -desc "expr-unary-not-string-tclobject" -body {expr-unary-not-string-tclobject}

bench -desc "expr-unary-not-int-tclobject-parse" -body {expr-unary-not-int-tclobject-parse}
bench -desc "expr-unary-not-double-tclobject-parse" -body {expr-unary-not-double-tclobject-parse}

bench -desc "expr-boolean-unary-not-int-literal" -body {expr-boolean-unary-not-int-literal}
bench -desc "expr-boolean-unary-not-double-literal" -body {expr-boolean-unary-not-double-literal}
bench -desc "expr-boolean-unary-not-int-literal-subexpr" -body {expr-boolean-unary-not-int-literal-subexpr}
bench -desc "expr-boolean-unary-not-int-tclobject" -body {expr-boolean-unary-not-int-tclobject}
bench -desc "expr-boolean-unary-not-double-tclobject" -body {expr-boolean-unary-not-double-tclobject}

bench -desc "expr-math-funcs" -body {expr-math-funcs}

