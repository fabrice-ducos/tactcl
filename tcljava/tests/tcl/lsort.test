# Commands covered:  lsort
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1991-1993 The Regents of the University of California.
# Copyright (c) 1994 Sun Microsystems, Inc.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: lsort.test,v 1.3 2006/05/17 21:56:34 mdejong Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

test lsort-1.1 {lsort command} {
    lsort {abdeq ab 1 ac a}
} {1 a ab abdeq ac}
test lsort-1.2 {lsort command} {
    lsort -decreasing {abdeq ab 1 ac a}
} {ac abdeq ab a 1}
test lsort-1.3 {lsort command} {
    lsort -increasing {abdeq ab 1 ac a}
} {1 a ab abdeq ac}
test lsort-1.4 {lsort command} {
    lsort {{one long element}}
} {{one long element}}
test lsort-1.5 {lsort command} {
    lsort {}
} {}
test lsort-1.6 {lsort with characters needing backslashes} {
    lsort {$ \\ [] \{}
} {{$} {[]} \\ \{}

test lsort-2.1 {lsort -integer} {
    lsort -integer -inc {1 180 62 040 180 -42 33 0x40}
} {-42 1 040 33 62 0x40 180 180}
test lsort-2.2 {lsort -integer} {
    lsort -int -dec {1 180 62 040 180 -42 33 0x40}
} {180 180 0x40 62 33 040 1 -42}
test lsort-2.3 {lsort -integer} {
    list [catch {lsort -integer {xxx 180.2 62 040 180 -42 33 0x40}} msg] $msg $errorInfo
} {1 {expected integer but got "xxx"} {expected integer but got "xxx"
    (converting list element from string to integer)
    invoked from within
"lsort -integer {xxx 180.2 62 040 180 -42 33 0x40}"}}
test lsort-2.4 {lsort -integer} {
    list [catch {lsort -integer {1 180.2 62 040 180 -42 33 0x40}} msg] $msg $errorInfo
} {1 {expected integer but got "180.2"} {expected integer but got "180.2"
    (converting list element from string to integer)
    invoked from within
"lsort -integer {1 180.2 62 040 180 -42 33 0x40}"}}

test lsort-3.1 {lsort -real} {
    lsort -real {1 180.1 62 040 180 -42.7 33}
} {-42.7 1 33 040 62 180 180.1}
test lsort-3.2 {lsort -real} {
    lsort -r -dec {1 180.1 62 040 180 -42.7 33}
} {180.1 180 62 040 33 1 -42.7}
test lsort-3.3 {lsort -real} {
    list [catch {lsort -real -inc {xxx 20 62 180 -42.7 33}} msg] $msg $errorInfo
} {1 {expected floating-point number but got "xxx"} {expected floating-point number but got "xxx"
    (converting list element from string to real)
    invoked from within
"lsort -real -inc {xxx 20 62 180 -42.7 33}"}}
test lsort-3.4 {lsort -real} {
    list [catch {lsort -real -inc {1 0x40 62 180 -42.7 33}} msg] $msg $errorInfo
} {1 {expected floating-point number but got "0x40"} {expected floating-point number but got "0x40"
    (converting list element from string to real)
    invoked from within
"lsort -real -inc {1 0x40 62 180 -42.7 33}"}}

proc lsort1 {a b} {
    expr {2*([string match x* $a] - [string match x* $b])
	    + [string match *y $a] - [string match *y $b]}
}
proc lsort2 {a b} {
    error "comparison error"
}
proc lsort3 {a b} {
    concat "foobar"
}

test lsort-4.1 {lsort -command} {
    lsort -command lsort1 {xxx yyy abc {xx y}}
} {abc yyy xxx {xx y}}
test lsort-4.2 {lsort -command} {
    lsort -command lsort1 -dec {xxx yyy abc {xx y}}
} {{xx y} xxx yyy abc}
test lsort-4.3 {lsort -command} {tempNotJacl} {
    list [catch {lsort -command lsort2 -dec {1 1 1 1}} msg] $msg $errorInfo
} {1 {comparison error} {comparison error
    while executing
"error "comparison error""
    (procedure "lsort2" line 2)
    invoked from within
"lsort2 1 1"
    (user-defined comparison command)
    invoked from within
"lsort -command lsort2 -dec {1 1 1 1}"}}
test lsort-4.4 {lsort -command} {
    list [catch {lsort -command lsort3 -dec {1 2 3 4}} msg] $msg $errorInfo
} {1 {comparison command returned non-numeric result} {comparison command returned non-numeric result
    while executing
"lsort -command lsort3 -dec {1 2 3 4}"}}
test lsort-4.5 {lsort -command} {
    list [catch {lsort -command {xxx yyy xxy abc}} msg] $msg
} {1 {"-command" option must be followed by comparison command}}

test lsort-5.1 {lsort errors} {
    list [catch lsort msg] $msg
} {1 {wrong # args: should be "lsort ?options? list"}}
test lsort-5.2 {lsort errors} {
    list [catch {lsort a b} msg] $msg
} {1 {bad option "a": must be -ascii, -command, -decreasing, -dictionary, -increasing, -index, -integer, or -real}}
test lsort-5.3 {lsort errors} {
    list [catch {lsort "\{"} msg] $msg
} {1 {unmatched open brace in list}}
test lsort-5.4 {lsort errors} {
    list [catch {lsort -in {1 180.0 040 62 180 -42.7 33}} msg] $msg
} {1 {ambiguous option "-in": must be -ascii, -command, -decreasing, -dictionary, -increasing, -index, -integer, or -real}}

test lsort-6.0 {lsort} {
    set l {
        string-eq-loop
        string-loop
        string
        string-two-obj-eq-loop
        string-two-obj-loop
    }
    set results [lsort $l]
    # Default should be -ascii
    if {$results != [lsort -ascii $l]} {error "does not match -ascii"}
    set results
} {string string-eq-loop string-loop string-two-obj-eq-loop string-two-obj-loop}

test lsort-6.1 {lsort -dictionary} {
    set l {
        string-eq-loop
        string-loop
        string
        string-two-obj-eq-loop
        string-two-obj-loop
    }
    lsort -dictionary $l
} {string string-eq-loop string-loop string-two-obj-eq-loop string-two-obj-loop}

test lsort-6.2 {lsort -dictionary} {
    set l {
        string2
        string
    }
    lsort -dictionary $l
} {string string2}

test lsort-6.3 {lsort -dictionary} {
    set l {
        stringA
        string
    }
    lsort -dictionary $l
} {string stringA}

test lsort-6.4 {lsort -dictionary} {
    set l {
        bigsqrt2-1
        bigsqrt1-1
        bigsqrt2-2
        bigsqrt1-2
    }
    lsort -dictionary $l
} {bigsqrt1-1 bigsqrt1-2 bigsqrt2-1 bigsqrt2-2}


# The following lsort tests come from cmdIL.test in the C Tcl dist.

test cmdIL-1.1 {Tcl_LsortObjCmd procedure} {
    list [catch {lsort} msg] $msg
} {1 {wrong # args: should be "lsort ?options? list"}}

test cmdIL-1.2 {Tcl_LsortObjCmd procedure} {
    list [catch {lsort -foo {1 3 2 5}} msg] $msg
} {1 {bad option "-foo": must be -ascii, -command, -decreasing, -dictionary, -increasing, -index, -integer, or -real}}

test cmdIL-1.3 {Tcl_LsortObjCmd procedure, default options} {
    lsort {d e c b a \{ d35 d300}
} {a b c d d300 d35 e \{}

test cmdIL-1.4 {Tcl_LsortObjCmd procedure, -ascii option} {
    lsort -integer -ascii {d e c b a d35 d300}
} {a b c d d300 d35 e}

test cmdIL-1.5 {Tcl_LsortObjCmd procedure, -command option} {
    list [catch {lsort -command {1 3 2 5}} msg] $msg
} {1 {"-command" option must be followed by comparison command}}

test cmdIL-1.6 {Tcl_LsortObjCmd procedure, -command option} {unimplemented} {
    proc cmp {a b} {
	expr {[string match x* $b] - [string match x* $a]}
    }
    lsort -command cmp {x1 abc x2 def x3 x4}
} {x1 x2 x3 x4 abc def}

test cmdIL-1.7 {Tcl_LsortObjCmd procedure, -decreasing option} {
    lsort -decreasing {d e c b a d35 d300}
} {e d35 d300 d c b a}

test cmdIL-1.8 {Tcl_LsortObjCmd procedure, -dictionary option} {
    lsort -dictionary {d e c b a d35 d300}
} {a b c d d35 d300 e}

test cmdIL-1.9 {Tcl_LsortObjCmd procedure, -dictionary option} {
    lsort -dictionary {1k 0k 10k}
} {0k 1k 10k}

test cmdIL-1.10 {Tcl_LsortObjCmd procedure, -increasing option} {
    lsort -decreasing -increasing {d e c b a d35 d300}
} {a b c d d300 d35 e}

test cmdIL-1.11 {Tcl_LsortObjCmd procedure, -index option} {
    list [catch {lsort -index {1 3 2 5}} msg] $msg
} {1 {"-index" option must be followed by list index}}

test cmdIL-1.12 {Tcl_LsortObjCmd procedure, -index option} {
    list [catch {lsort -index foo {1 3 2 5}} msg] $msg
} {1 {bad index "foo": must be integer or end?-integer?}}

test cmdIL-1.13 {Tcl_LsortObjCmd procedure, -index option} {
    lsort -index end -integer {{2 25} {10 20 50 100} {3 16 42} 1}
} {1 {2 25} {3 16 42} {10 20 50 100}}

test cmdIL-1.14 {Tcl_LsortObjCmd procedure, -index option} {
    lsort -index 1 -integer {{1 25 100} {3 16 42} {10 20 50}}
} {{3 16 42} {10 20 50} {1 25 100}}

test cmdIL-1.15 {Tcl_LsortObjCmd procedure, -integer option} {
    lsort -integer {24 6 300 18}
} {6 18 24 300}

test cmdIL-1.16 {Tcl_LsortObjCmd procedure, -integer option} {
    list [catch {lsort -integer {1 3 2.4}} msg] $msg
} {1 {expected integer but got "2.4"}}

test cmdIL-1.17 {Tcl_LsortObjCmd procedure, -real option} {
    lsort -real {24.2 6e3 150e-1}
} {150e-1 24.2 6e3}

test cmdIL-1.18 {Tcl_LsortObjCmd procedure, bogus list} {
    list [catch {lsort "1 2 3 \{ 4"} msg] $msg
} {1 {unmatched open brace in list}}

test cmdIL-1.19 {Tcl_LsortObjCmd procedure, empty list} {
    lsort {}
} {}

test cmdIL-1.22 {Tcl_LsortObjCmd procedure, unique sort} {unimplemented} {
    lsort -integer -unique {3 1 2 3 1 4 3}
} {1 2 3 4}

test cmdIL-1.23 {Tcl_LsortObjCmd procedure, unique sort with index} {unimplemented} {
    # lsort -unique should return the last unique item
    lsort -unique -index 0 {{a b} {c b} {a c} {d a}}
} {{a c} {c b} {d a}}

test cmdIL-1.24 {Tcl_LsortObjCmd procedure, order of -index and -command} {unimplemented} {
    catch {rename 1 ""}
    proc testcmp {a b} {return [string compare $a $b]}
    set l [list [list a b] [list c d]]
    set result [list [catch {lsort -command testcmp -index 1 $l} msg] $msg]
    rename testcmp ""
    set result
} [list 0 [list [list a b] [list c d]]]

test cmdIL-1.25 {Tcl_LsortObjCmd procedure, order of -index and -command} {unimplemented} {
    catch {rename 1 ""}
    proc testcmp {a b} {return [string compare $a $b]}
    set l [list [list a b] [list c d]]
    set result [list [catch {lsort -index 1 -command testcmp $l} msg] $msg]
    rename testcmp ""
    set result
} [list 0 [list [list a b] [list c d]]]

# Note that the required order only exists in the end-1'th element;
# indexing using the end element or any fixed offset from the start
# will not work...
test cmdIL-1.26 {Tcl_LsortObjCmd procedure, offset indexing from end} {unimplemented} {
    lsort -index end-1 {{a 1 e i} {b 2 3 f g} {c 4 5 6 d h}}
} {{c 4 5 6 d h} {a 1 e i} {b 2 3 f g}}

