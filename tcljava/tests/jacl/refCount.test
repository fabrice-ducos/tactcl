# This file tests issues related to reference counting for TclObjects.
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 2002 by Mo DeJong.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: refCount.test,v 1.4 2005/11/21 02:02:41 mdejong Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

setupJavaPackage

test refcount-1.1 {TclObject.refCount} {
    set obj mystring
    jtest refcount $obj
} 1

test refcount-1.2 {TclObject.refCount} {
    jtest refcount [list 1 2 3]
} 0

test refcount-1.3 {TclObject.refCount} {
    set obj mystring
    set copy $obj
    jtest refcount $obj
} 2

test refcount-1.4 {TclObject.refCount} {
    set obj1 mystring
    set obj2 [format %s $obj1]
    list [jtest refcount $obj1] \
         [jtest refcount $obj2]
} {1 1}


test refcount-2.1 {TclObject.refCount} {
    set obj [java::new String mystring]
    jtest refcount $obj
} 1

test refcount-2.2 {TclObject.refCount} {
    jtest refcount [java::new String mystring]
} 0

test refcount-2.3 {TclObject.refCount} {
    set obj [java::new String mystring]
    set copy $obj
    jtest refcount $obj
} 2

test refcount-2.4 {TclObject.refCount} {
    set obj1 [java::new String mystring]
    set obj2 [format %s $obj1]
    java::isnull $obj2
    list [jtest refcount $obj1] \
         [jtest refcount $obj2]
} {1 1}

# No test series 3 for Jacl

test refcount-4.1 {change internal rep} {
    set results [list]

    [java::getinterp] createCommand testrerep \
        [java::new tests.ReRepCmd]

    set obj [java::new String mystring]
    lappend results [jtest type $obj] [jtest refcount $obj]
    testrerep $obj
    rename testrerep {}
    lappend results [jtest type $obj] [jtest refcount $obj]
} {tcl.lang.ReflectObject 1 tcl.lang.TclString 1}

test refcount-4.2 {TclObject not disposed} {
    # Incrementing and decrementing the TclObject
    # ref count in JavaCmdProc should not
    # dispose of the TclObject wrapper created
    # for the argument. If it did, the toString
    # method below would fail because tobj was dead.

    set sig "foo"
    set tobj [jtest getobject $sig]
    $tobj toString
} {foo}

test refcount-4.3 {m_nullResult is shared} {
    interp create i
    i eval {package require java}
    i eval {
        [java::getinterp] createCommand testemptyresult \
            [java::new tcl.lang.TestEmptyResultCmd]
        testemptyresult
    }
    set result [i eval {testemptyresult}]
    interp delete i
    set result
} 1

test refcount-4.4 {m_nullResult ref count not changed by setResult} {
    [java::getinterp] createCommand testemptyresult \
            [java::new tcl.lang.TestEmptyResultCmd]
    set result [testemptyresult 1]
    rename testemptyresult {}
    set result
} ok

test refcount-5.1 {Duplicate a TclObject} {
    set results [list]
    set obj [java::new Object]
    set copy $obj
    lappend results [jtest refcount $obj] [jtest refcount $copy]
    # will copy the TclObject because it is shared
    lappend obj BLAH
    lappend results [jtest refcount $obj] [jtest refcount $copy]
    set copy2 $copy
    set copy3 $copy
    set copy4 $obj
    lappend results [jtest refcount $obj] [jtest refcount $copy]
} {2 2 1 1 2 3}

test refcount-5.2 {java::isnull should not change TclObject.refCount} {
    set results [list]
    set obj [java::new Object]
    set copy [format %s $obj]
    lappend results [jtest refcount $obj] [jtest refcount $copy]
    java::isnull $copy
    lappend results [jtest refcount $obj] [jtest refcount $copy]
} {1 1 1 1}

test refcount-5.3 {java::isnull should not change TclObject.refCount} {
    set results [list]
    set obj [java::new Object]
    set copy [format %s $obj]
    lappend results [jtest refcount $obj] [jtest refcount $copy]
    java::isnull $copy
    lappend results [jtest refcount $obj] [jtest refcount $copy]
} {1 1 1 1}

test refcount-6.1 {hold ref to CObject} {
    [java::getinterp] createCommand testholdref \
        [java::new tests.HoldRefCmd]

    set results [list]
    set obj mystring
    lappend results [jtest refcount $obj]
    testholdref $obj
    lappend results [jtest refcount $obj]
    testholdref $obj
    lappend results [jtest refcount $obj]
    rename testholdref {}
    lappend results [jtest refcount $obj]
} {1 2 3 1}

test refcount-6.2 {hold ref to TclObject} {
    [java::getinterp] createCommand testholdref \
        [java::new tests.HoldRefCmd]

    set results [list]
    set obj [java::new Object]
    lappend results [jtest refcount $obj]
    testholdref $obj
    lappend results [jtest refcount $obj]
    testholdref $obj
    lappend results [jtest refcount $obj]
    rename testholdref {}
    lappend results [jtest refcount $obj]
} {1 2 3 1}


test refcount-7.1 {parsing} {
    set results [list]
    set var "my string value"
    lappend results [jtest refcount $var]

    set var "my string value"
    expr {$var == ""}
    lappend results [jtest refcount $var]

    set var "my string value"
    expr {"$var" == ""}
    lappend results [jtest refcount $var]

    set var "my string value"
    expr {[set var] == ""}
    lappend results [jtest refcount $var]

    set var "my string value"
    expr {"[set var]" == ""}
    lappend results [jtest refcount $var]

    set var "my string value"
    subst {[set var] == ""}
    lappend results [jtest refcount $var]
} {1 1 1 1 1 1}

test refcount-7.2 {parsing, error raised} {
    set results [list]
    set err "my error"
    lappend results [jtest refcount $err]
    catch {error $err}
    lappend results [jtest refcount $err]
} {1 1}

test refcount-7.3 {parsing, error raised} {
    proc bgerror { args } {}
    set results [list]
    set err "my error"
    lappend results [jtest refcount $err]
    after idle {error $err}
    update
    lappend results [jtest refcount $err]
} {1 1}

test refcount-8.0 {Command epoch gets incremented on rename, delete, and so on} {
    list \
        [java::call tcl.lang.TestEpoch testCmdEpoch1 [java::getinterp]] \
        [java::call tcl.lang.TestEpoch testCmdEpoch2 [java::getinterp]] \
        [java::call tcl.lang.TestEpoch testCmdEpoch2 [java::getinterp]]
} {OK OK OK}

test refcount-9.0 {recycled int TclObject} {
    java::call tcl.lang.TestRecycled testRecycledInt0 [java::getinterp]
} {recycled 100 refCount 2 recycled 200 refCount 2 was_recycled true}

test refcount-9.1 {recycled int TclObject} {
    java::call tcl.lang.TestRecycled testRecycledInt1 [java::getinterp]
} {recycled 100 refCount 2 refCount 3 refCount 2}

test refcount-9.2 {recycled int TclObject} {
    java::call tcl.lang.TestRecycled testRecycledInt2 [java::getinterp]
} {recycled 100 refCount 2 refCount 3 new_recycled true refCount 2 recycled 100 refCount 1}

test refcount-9.3 {recycled int TclObject} {
    java::call tcl.lang.TestRecycled testRecycledInt3 [java::getinterp]
} {recycled 100 refCount 2 refCount 1 was_recycled true getResult 200 refCount 2}

test refcount-9.4 {recycled int TclObject} {
    java::call tcl.lang.TestRecycled testRecycledInt4 [java::getinterp]
} {recycled 100 refCount 2 recycled 200 refCount 3 refCount 2}

test refcount-10.0 {recycled double TclObject} {
    java::call tcl.lang.TestRecycled testRecycledDouble0 [java::getinterp]
} {recycled 100.0 refCount 2 recycled 200.0 refCount 2 was_recycled true}

test refcount-10.1 {recycled double TclObject} {
    java::call tcl.lang.TestRecycled testRecycledDouble1 [java::getinterp]
} {recycled 100.0 refCount 2 refCount 3 refCount 2}

test refcount-10.2 {recycled double TclObject} {
    java::call tcl.lang.TestRecycled testRecycledDouble2 [java::getinterp]
} {recycled 100.0 refCount 2 refCount 3 new_recycled true refCount 2 recycled 100.0 refCount 1}

test refcount-10.3 {recycled double TclObject} {
    java::call tcl.lang.TestRecycled testRecycledDouble3 [java::getinterp]
} {recycled 100.0 refCount 2 refCount 1 was_recycled true getResult 200.0 refCount 2}

test refcount-10.4 {recycled double TclObject} {
    java::call tcl.lang.TestRecycled testRecycledDouble4 [java::getinterp]
} {recycled 100.0 refCount 2 recycled 200.0 refCount 3 refCount 2}


# cleanup
catch {unset obj}
catch {unset copy}
catch {unset obj1}
catch {unset obj2}
catch {unset str}
catch {unset results}
::tcltest::cleanupTests
return
