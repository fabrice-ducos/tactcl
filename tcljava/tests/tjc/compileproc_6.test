test_tjc_init

# Test series 6 is for variable cache logic.
# The variable cache code make use of an
# array of Var object called compiledLocals.
# Both scalar and array variables can appear
# but array elements can not.
#
# This is enabled via the +cache-variables
# OPTIONS flag.

# Load jdk test data in case this has not already been done.
source [file join [tcltest::testsDirectory] jdkutils.tcl]
test_jdk_load_config

# Invoked after compileproc_init is invoked inside compileproc_compile.

proc test_compileproc_6_set_flags { proc_name } {
    global _compileproc
    global test_compileproc_6_cache_variables

    # Inline all containers but don't bother caching commands.
    set _compileproc(options,inline_containers) {all}

    # Set flag if global is set, then unset
    if {[info exists test_compileproc_6_cache_variables]} {
        if {$test_compileproc_6_cache_variables} {
            set _compileproc(options,cache_variables) 1
        }
        unset test_compileproc_6_cache_variables
    }
}

tcltest::test compileproc6-1.0 {no variable cache for get} {
    set script {
proc p {} {
    list $x
}
}

    set test_compileproc_6_cache_variables 0
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list $x
            TclObject[] objv0 = TJC.grabObjv(interp, 2);
            try {
                TclObject tmp1;
                // Arg 0 constant: list
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 variable: $x
                tmp1 = interp.getVar("x", null, 0);
                tmp1.preserve();
                objv0[1] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjvElems(interp, objv0, 2);
            }
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("list");
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc6-1.1 {use variable cache for get} {
    set script {
proc p {} {
    list $x
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        Var[] compiledLocals =
            TJC.initCompiledLocals(callFrame, 1, compiledLocalsNames);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list $x
            TclObject[] objv0 = TJC.grabObjv(interp, 2);
            try {
                TclObject tmp1;
                // Arg 0 constant: list
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 variable: $x
                tmp1 = getVarScalar(interp, "x", compiledLocals, 0);
                tmp1.preserve();
                objv0[1] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjvElems(interp, objv0, 2);
            }
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("list");
        const0.preserve(); const0.preserve();
    }

    String[] compiledLocalsNames = {
        "x"
    };
} // end class Test1
}}

tcltest::test compileproc6-1.2 {no variable cache for arg set} {
    set script {
proc p { x } {
}
}

    set test_compileproc_6_cache_variables 0
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 2) {
            throw new TclNumArgsException(interp, 1, objv, "x");
        }
        interp.setVar("x", null, objv[1], 0);
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc6-1.3 {use variable cache for arg set} {
    set script {
proc p { x } {
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        Var[] compiledLocals =
            TJC.initCompiledLocals(callFrame, 1, compiledLocalsNames);
        try {
        if (objv.length != 2) {
            throw new TclNumArgsException(interp, 1, objv, "x");
        }
        setVarScalar(interp, "x", objv[1], compiledLocals, 0);
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    String[] compiledLocalsNames = {
        "x"
    };
} // end class Test1
}}

tcltest::test compileproc6-1.4 {use variable cache for arg set} {
    set script {
proc p { x {y 1} args } {
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        Var[] compiledLocals =
            TJC.initCompiledLocals(callFrame, 3, compiledLocalsNames);
        try {
        if (objv.length < 2) {
            throw new TclNumArgsException(interp, 1, objv, "x ?y? args");
        }
        setVarScalar(interp, "x", objv[1], compiledLocals, 0);
        setVarScalar(interp, "y", 
            ((objv.length <= 2) ? const0 : objv[2]), compiledLocals, 1);
        if ( objv.length <= 3 ) {
            setVarScalar(interp, "args", "", compiledLocals, 2);
        } else {
            TclObject argl = TclList.newInstance();
            for (int i = 3; i < objv.length; i++) {
                TclList.append(interp, argl, objv[i]);
            }
            setVarScalar(interp, "args", argl, compiledLocals, 2);
        }
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclInteger.newInstance(1);
        const0.preserve(); const0.preserve();
    }

    String[] compiledLocalsNames = {
        "x",
        "y",
        "args"
    };
} // end class Test1
}}

tcltest::test compileproc6-1.5 {use variable cache for foreach var set} {
    set script {
proc p {} {
    foreach x {1 2} {}
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        Var[] compiledLocals =
            TJC.initCompiledLocals(callFrame, 1, compiledLocalsNames);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: foreach x {1 2} {}
            TclObject tmp0 = null;
            try {
                tmp0 = const0;
                tmp0.preserve();
                final int tmp0_length = TclList.getLength(interp, tmp0);

                for ( int index1 = 0 ; index1 < tmp0_length ; index1++ ) {
                    TclObject tmp2 = TclList.index(interp, tmp0, index1);
                    try {
                        setVarScalar(interp, "x", tmp2, compiledLocals, 0);
                    } catch (TclException ex) {
                        TJC.foreachVarErr(interp, "x");
                    }
                }
                interp.resetResult();
            } finally {
                if ( tmp0 != null ) {
                    tmp0.release();
                }
            }
        } // End Invoke: foreach
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("1 2");
        const0.preserve(); const0.preserve();
    }

    String[] compiledLocalsNames = {
        "x"
    };
} // end class Test1
}}

tcltest::test compileproc6-1.6 {use variable cache for catch var set} {
    set script {
proc p {} {
    catch {error MSG} x
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        Var[] compiledLocals =
            TJC.initCompiledLocals(callFrame, 1, compiledLocalsNames);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: catch {error MSG} x
            int code0 = TCL.OK;
            try {
            if ( false ) { throw (TclException) null; }
            { // Invoke: error MSG
                TclObject[] objv1 = TJC.grabObjv(interp, 2);
                try {
                    TclObject tmp2;
                    // Arg 0 constant: error
                    tmp2 = const0;
                    tmp2.preserve();
                    objv1[0] = tmp2;
                    // Arg 1 constant: MSG
                    tmp2 = const1;
                    tmp2.preserve();
                    objv1[1] = tmp2;
                    TJC.invoke(interp, null, objv1, 0);
                } finally {
                    TJC.releaseObjvElems(interp, objv1, 2);
                }
            } // End Invoke: error
            } catch (TclException ex) {
                code0 = ex.getCompletionCode();
            }
            TclObject result = interp.getResult();
            try {
                setVarScalar(interp, "x", result, compiledLocals, 0);
            } catch (TclException ex) {
                TJC.catchVarErr(interp);
            }
            interp.resetResult();
            interp.setResult(code0);
        } // End Invoke: catch
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;
    TclObject const1;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("error");
        const0.preserve(); const0.preserve();
        const1 = TclString.newInstance("MSG");
        const1.preserve(); const1.preserve();
    }

    String[] compiledLocalsNames = {
        "x"
    };
} // end class Test1
}}



tcltest::test compileproc6-2.0 {varname special cases} {
    # A fully qualified variable name inside a proc
    # will be added to the compiled locals array.
    set script {
proc p {} {
    list $::x
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        Var[] compiledLocals =
            TJC.initCompiledLocals(callFrame, 1, compiledLocalsNames);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list $::x
            TclObject[] objv0 = TJC.grabObjv(interp, 2);
            try {
                TclObject tmp1;
                // Arg 0 constant: list
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 variable: $::x
                initVarScoped(interp, "::x", compiledLocals, 0);
                tmp1 = getVarScalar(interp, "::x", compiledLocals, 0);
                tmp1.preserve();
                objv0[1] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjvElems(interp, objv0, 2);
            }
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("list");
        const0.preserve(); const0.preserve();
    }

    String[] compiledLocalsNames = {
        "::x"
    };
} // end class Test1
}}

tcltest::test compileproc6-2.1 {varname special cases} {
    # A scoped variable name that is not fully qualified
    # will not be added to the compiled locals array.
    set script {
proc p {} {
    list $ONE::x
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list $ONE::x
            TclObject[] objv0 = TJC.grabObjv(interp, 2);
            try {
                TclObject tmp1;
                // Arg 0 constant: list
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 variable: $ONE::x
                tmp1 = interp.getVar("ONE::x", null, 0);
                tmp1.preserve();
                objv0[1] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjvElems(interp, objv0, 2);
            }
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("list");
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc6-2.2 {varname special cases} {
    # A fully qualified variable name inside a proc
    # will be added to the compiled locals array.
    set script {
proc p {} {
    catch {} ::x
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        Var[] compiledLocals =
            TJC.initCompiledLocals(callFrame, 1, compiledLocalsNames);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: catch {} ::x
            try {
                initVarScoped(interp, "::x", compiledLocals, 0);
                setVarScalar(interp, "::x", "", compiledLocals, 0);
            } catch (TclException ex) {
                TJC.catchVarErr(interp);
            }
            interp.resetResult();
            interp.setResult(TCL.OK);
        } // End Invoke: catch
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    String[] compiledLocalsNames = {
        "::x"
    };
} // end class Test1
}}

tcltest::test compileproc6-2.3 {varname special cases} {
    # A scoped variable name that is not fully
    # qualified will be set at runtime.
    set script {
proc p {} {
    catch {} ONE::x
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: catch {} ONE::x
            try {
                interp.setVar("ONE::x", null, "", 0);
            } catch (TclException ex) {
                TJC.catchVarErr(interp);
            }
            interp.resetResult();
            interp.setResult(TCL.OK);
        } // End Invoke: catch
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}



tcltest::test compileproc6-3.0 {no variable cache for array get} {
    set script {
proc p {} {
    list $arr(one)
}
}

    set test_compileproc_6_cache_variables 0
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list $arr(one)
            TclObject[] objv0 = TJC.grabObjv(interp, 2);
            try {
                TclObject tmp1;
                // Arg 0 constant: list
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 variable: $arr(one)
                tmp1 = interp.getVar("arr", "one", 0);
                tmp1.preserve();
                objv0[1] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjvElems(interp, objv0, 2);
            }
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("list");
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc6-3.1 {use variable cache for array get} {
    set script {
proc p {} {
    list $arr(one)
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        Var[] compiledLocals =
            TJC.initCompiledLocals(callFrame, 1, compiledLocalsNames);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list $arr(one)
            TclObject[] objv0 = TJC.grabObjv(interp, 2);
            try {
                TclObject tmp1;
                // Arg 0 constant: list
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 variable: $arr(one)
                tmp1 = getVarArray(interp, "arr", "one", compiledLocals, 0);
                tmp1.preserve();
                objv0[1] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjvElems(interp, objv0, 2);
            }
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("list");
        const0.preserve(); const0.preserve();
    }

    String[] compiledLocalsNames = {
        "arr"
    };
} // end class Test1
}}

tcltest::test compileproc6-3.2 {use variable cache for array get} {
    set script {
proc p {} {
    list \
        $arr() \
        $arr(s) \
        $arr($s) \
        $arr([]) \
        $arr([cmd]) \
        $arr(${s}x${s})
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        Var[] compiledLocals =
            TJC.initCompiledLocals(callFrame, 2, compiledLocalsNames);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list $arr() $arr(s) $arr($s) $arr([]) $arr([cmd]) $arr(${s}x${s})
            TclObject[] objv0 = TJC.grabObjv(interp, 7);
            try {
                TclObject tmp1;
                // Arg 0 constant: list
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 variable: $arr()
                tmp1 = getVarArray(interp, "arr", "", compiledLocals, 0);
                tmp1.preserve();
                objv0[1] = tmp1;
                // Arg 2 variable: $arr(s)
                tmp1 = getVarArray(interp, "arr", "s", compiledLocals, 0);
                tmp1.preserve();
                objv0[2] = tmp1;
                // Arg 3 variable: $arr($s)
                tmp1 = getVarScalar(interp, "s", compiledLocals, 1);
                tmp1 = getVarArray(interp, "arr", tmp1.toString(), compiledLocals, 0);
                tmp1.preserve();
                objv0[3] = tmp1;
                // Arg 4 variable: $arr([])
                tmp1 = getVarArray(interp, "arr", "", compiledLocals, 0);
                tmp1.preserve();
                objv0[4] = tmp1;
                // Arg 5 variable: $arr([cmd])
                { // Invoke: cmd
                    TclObject[] objv2 = TJC.grabObjv(interp, 1);
                    try {
                        TclObject tmp3;
                        // Arg 0 constant: cmd
                        tmp3 = const1;
                        tmp3.preserve();
                        objv2[0] = tmp3;
                        TJC.invoke(interp, null, objv2, 0);
                    } finally {
                        TJC.releaseObjvElems(interp, objv2, 1);
                    }
                } // End Invoke: cmd
                tmp1 = interp.getResult();
                tmp1 = getVarArray(interp, "arr", tmp1.toString(), compiledLocals, 0);
                tmp1.preserve();
                objv0[5] = tmp1;
                // Arg 6 variable: $arr(${s}x${s})
                StringBuffer sbtmp4 = new StringBuffer(64);
                tmp1 = getVarScalar(interp, "s", compiledLocals, 1);
                sbtmp4.append(tmp1.toString());
                sbtmp4.append("x");
                tmp1 = getVarScalar(interp, "s", compiledLocals, 1);
                sbtmp4.append(tmp1.toString());
                tmp1 = getVarArray(interp, "arr", sbtmp4.toString(), compiledLocals, 0);
                tmp1.preserve();
                objv0[6] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjvElems(interp, objv0, 7);
            }
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;
    TclObject const1;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("list");
        const0.preserve(); const0.preserve();
        const1 = TclString.newInstance("cmd");
        const1.preserve(); const1.preserve();
    }

    String[] compiledLocalsNames = {
        "arr",
        "s"
    };
} // end class Test1
}}

tcltest::test compileproc6-3.3 {no variable cache for array set} {
    set script {
proc p {} {
    catch {} a(k)
}
}

    set test_compileproc_6_cache_variables 0
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: catch {} a(k)
            try {
                interp.setVar("a", "k", "", 0);
            } catch (TclException ex) {
                TJC.catchVarErr(interp);
            }
            interp.resetResult();
            interp.setResult(TCL.OK);
        } // End Invoke: catch
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc6-3.4 {use variable cache for array set} {
    set script {
proc p {} {
    catch {} a(k)
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        Var[] compiledLocals =
            TJC.initCompiledLocals(callFrame, 1, compiledLocalsNames);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: catch {} a(k)
            try {
                setVarArray(interp, "a", "k", "", compiledLocals, 0);
            } catch (TclException ex) {
                TJC.catchVarErr(interp);
            }
            interp.resetResult();
            interp.setResult(TCL.OK);
        } // End Invoke: catch
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    String[] compiledLocalsNames = {
        "a"
    };
} // end class Test1
}}

tcltest::test compileproc6-3.5 {no variable cache for array set} {
    # The catch command accepts a non-static array variable name

    set script {
proc p {} {
    catch {} a($s)
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        Var[] compiledLocals =
            TJC.initCompiledLocals(callFrame, 2, compiledLocalsNames);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: catch {} a($s)
            TclObject tmp0 = getVarScalar(interp, "s", compiledLocals, 0);
            String tmp1 = tmp0.toString();
            try {
            setVarArray(interp, "a", tmp1, "", compiledLocals, 1);
            } catch (TclException ex) {
                TJC.catchVarErr(interp);
            }
            interp.resetResult();
            interp.setResult(TCL.OK);
        } // End Invoke: catch
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    String[] compiledLocalsNames = {
        "s",
        "a"
    };
} // end class Test1
}}

tcltest::test compileproc6-3.6 {use variable cache for array set} {
    # Init scoped array var
    set script {
proc p {} {
    catch {} ::a(k)
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        Var[] compiledLocals =
            TJC.initCompiledLocals(callFrame, 1, compiledLocalsNames);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: catch {} ::a(k)
            try {
                initVarScoped(interp, "::a", compiledLocals, 0);
                setVarArray(interp, "::a", "k", "", compiledLocals, 0);
            } catch (TclException ex) {
                TJC.catchVarErr(interp);
            }
            interp.resetResult();
            interp.setResult(TCL.OK);
        } // End Invoke: catch
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    String[] compiledLocalsNames = {
        "::a"
    };
} // end class Test1
}}

tcltest::test compileproc6-3.7 {use variable cache for array set} {
    # Init scoped array var
    set script {
proc p {} {
    list $::a(k)
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        Var[] compiledLocals =
            TJC.initCompiledLocals(callFrame, 1, compiledLocalsNames);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list $::a(k)
            TclObject[] objv0 = TJC.grabObjv(interp, 2);
            try {
                TclObject tmp1;
                // Arg 0 constant: list
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 variable: $::a(k)
                initVarScoped(interp, "::a", compiledLocals, 0);
                tmp1 = getVarArray(interp, "::a", "k", compiledLocals, 0);
                tmp1.preserve();
                objv0[1] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjvElems(interp, objv0, 2);
            }
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("list");
        const0.preserve(); const0.preserve();
    }

    String[] compiledLocalsNames = {
        "::a"
    };
} // end class Test1
}}


# Cleanup
jdk_tool_cleanup
tcltest::cleanupTests

