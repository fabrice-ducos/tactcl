package require tcltest
package require java
package require TJC

# Run tests for TJCThread class, this is a second thread
# that contains logic to generate class files from Tcl source
# or Java source.

tcltest::test tjcthread-1.1 {start/stop tjc thread} {
    set results [list]

    java::call tcl.lang.TJCThread debugSetup "-event"

    java::call tcl.lang.TJCThread startThread
    lappend results INIT

    # See if the other thread started up.
    after 2000 "set done 1"
    vwait done
    if {![java::call tcl.lang.TJCThread isThreadReady]} {
        after 1000 "set done 1"
        vwait done
    }
    if {[java::call tcl.lang.TJCThread isThreadReady]} {
        lappend results READY
    } else {
        lappend results NOT_READY
    }

    java::call tcl.lang.TJCThread terminateThread

    # Wait for thread to actually die
    after 2000 "set done 1"
    vwait done

    lappend results TERMINATED
    list [set results] [java::call tcl.lang.TJCThread getEventLog]
} [list {INIT READY TERMINATED} \
{thread create
thread start
thread wait
terminateThread
notify in terminateThread
thread terminate request
thread terminated
}]

tcltest::test tjcthread-1.2 {compile fake test class} {
    catch {unset __fake_results}

    java::call tcl.lang.TJCThread debugSetup "-event"

    java::call tcl.lang.TJCThread startThread
    java::call tcl.lang.TJCThread compileJavaSource \
        "__FakeTest1.java" \
        "public class __FakeTest1 {}" \
        [java::new tcl.lang.TJCReadyVar \
            [java::getinterp] \
            __fake_results \
        ]

    # Wait 1 sec for fake result to be set.
    after 1000 "set done 1"
    vwait done

    java::call tcl.lang.TJCThread terminateThread

    # wait for thread to die
    after 2000 "set done 1"
    vwait done

    # There is a race condition having to do with when
    # the other thread starts. The log results could
    # differ slightly, but the test needs to pass either
    # way.

    set log1 \
{thread create
compileJavaSource __FakeTest1.java
Fake Java Test 1 processed
thread start
thread wait
terminateThread
notify in terminateThread
thread terminate request
thread terminated
}

    set log2 \
{thread create
compileJavaSource __FakeTest1.java
thread start
thread wait
Fake Java Test 1 processed
terminateThread
notify in terminateThread
thread terminate request
thread terminated
}

    set log3 \
{thread create
thread start
thread wait
compileJavaSource __FakeTest1.java
Fake Java Test 1 processed
terminateThread
notify in terminateThread
thread terminate request
thread terminated
}

    set log [java::call tcl.lang.TJCThread getEventLog]
    set log_match 0
    if {$log == $log1} {
        #puts "log 1 matched"
        set log_match 1
    } elseif {$log == $log2} {
        #puts "log 2 matched"
        set log_match 1
    } elseif {$log == $log3} {
        #puts "log 3 matched"
        set log_match 1
    } else {
        puts "log match failed for log:\n$log"
    }

    list [set __fake_results] $log_match
} {{OK {} __FakeTest1.java {public class __FakeTest1 {}} __FakeTest1 FAKE {}} 1}


tcltest::test tjcthread-1.3 {compile fake test class} {
    catch {unset __fake_results}

    java::call tcl.lang.TJCThread debugSetup "-event"

    java::call tcl.lang.TJCThread startThread
    # Don't give the thread a moment to start up...
    # the events should be queued and processed
    # when the thread actually starts up.
    java::call tcl.lang.TJCThread compileJavaSource \
        "__FakeTest2.java" \
        "public class __FakeTest2 {}" \
        [java::new tcl.lang.TJCReadyVar \
            [java::getinterp] \
            __fake_results \
        ]

    # Wait for some time for result
    #puts "sleep 5 sec"
    after 5000 "set done 1"
    vwait done

    java::call tcl.lang.TJCThread terminateThread

    # wait for thread to die
    after 2000 "set done 1"
    vwait done

    # There is a race condition having to do with when
    # the other thread starts. The log results could
    # differ slightly, but the test needs to pass either
    # way.

    set log1 \
{thread create
compileJavaSource __FakeTest2.java
notify in compileJavaSource
thread start
process event
Fake Java Test 2 processed
thread wait
terminateThread
notify in terminateThread
thread terminate request
thread terminated
}

    set log2 \
{thread create
thread start
thread wait
compileJavaSource __FakeTest2.java
notify in compileJavaSource
thread wakeup
process event
Fake Java Test 2 processed
thread wait
terminateThread
notify in terminateThread
thread terminate request
thread terminated
}

    set log [java::call tcl.lang.TJCThread getEventLog]
    set log_match 0
    if {$log == $log1} {
        #puts "log 1 matched"
        set log_match 1
    } elseif {$log == $log2} {
        #puts "log 2 matched"
        set log_match 1
    } else {
        puts "log match failed for log:\n$log"
    }

    list [set __fake_results] $log_match
} {{OK {} __FakeTest2.java {public class __FakeTest2 {}} __FakeTest2 FAKE {}} 1}

tcltest::test tjcthread-1.4 {compile fake test class} {
    catch {unset __fake_results}

    java::call tcl.lang.TJCThread debugSetup "-event"

    java::call tcl.lang.TJCThread startThread
    # Give the thread a moment to start up...
    while {![java::call tcl.lang.TJCThread isThreadReady]} {
        after 1000 "set done 1"
        vwait done
    }
    java::call tcl.lang.TJCThread compileJavaSource \
        "__FakeTest2.java" \
        "public class __FakeTest2 {}" \
        [java::new tcl.lang.TJCReadyVar \
            [java::getinterp] \
            __fake_results \
        ]

    # update so __fake_results gets set to {}
    #puts "update for initial set to {}"
    update

    # wait for compile to finish, note that the
    # other thread could have already processed
    # the event and invoked the callback.

    if {$__fake_results == {}} {
        #puts "TIMEOUT vwait for compiler finish"
        set id [after 10000 "set __fake_results TIMEOUT"]
        vwait __fake_results
        after cancel $id
        #puts "done vwait"
        #if {$__fake_results == "TIMEOUT"} {
        #    puts "TIMEOUT condition found"
        #}
    }

    # Wait for other thread to get into a ready state
    # again before terminating it.
    after 2000 "set done 1"
    vwait done

    java::call tcl.lang.TJCThread terminateThread

    # wait for thread to die
    after 2000 "set done 1"
    vwait done

    list [set __fake_results] [java::call tcl.lang.TJCThread getEventLog]
} [list {OK {} __FakeTest2.java {public class __FakeTest2 {}} __FakeTest2 FAKE {}} \
{thread create
thread start
thread wait
compileJavaSource __FakeTest2.java
notify in compileJavaSource
thread wakeup
process event
Fake Java Test 2 processed
thread wait
terminateThread
notify in terminateThread
thread terminate request
thread terminated
}]

# This test case will define a variable named
# TIMEOUT which stores the number of ms to use
# as the max wait timeout. This is needed so
# that these tests can be run on a heavily
# loaded system without a premature timeout.

set TIMEOUT [expr {10 * 1000}]

tcltest::test tjcthread-1.5 {compile test class} {
    catch {unset _TJC}

    java::call tcl.lang.TJCThread debugSetup "-event"

    set filename Test.java
    set jsrc "public class Test {}"

    java::call tcl.lang.TJCThread startThread
    # Give the thread a moment to start up...
    while {![java::call tcl.lang.TJCThread isThreadReady]} {
        after 1000 "set done 1"
        vwait done
    }
    java::call tcl.lang.TJCThread compileJavaSource \
        $filename \
        $jsrc \
        [java::new tcl.lang.TJCReadyVar \
            [java::getinterp] \
            _TJC($filename) \
        ]

    # update so var gets set to {}.
    # Note that the compile event could have
    # been run in the other thread so the
    # compile result var could get set here.

    update

    # If not processed, then set a timeout and wait
    # until the compile finishes.

    set thread_done_waits 0
    while {$_TJC($filename) == {}} {
        # Go to sleep for a second and then check to see
        # if the event has been processed yet.
        if {$thread_done_waits > 180} {
            puts "TIMEOUT after 3 minutes"
            break
        }

        after 1000 "set done 1"
        vwait done
        incr thread_done_waits
    }

    # Define max wait time
    if {$thread_done_waits < 10} {
        set TIMEOUT [expr {20 * 1000}]
    } else {
        set TIMEOUT [expr {$thread_done_waits * 3 * 1000}]
    }
    if {0} {
    puts "took $thread_done_waits seconds for compile to finish"
    puts "timeout will be [expr {$TIMEOUT / 1000}] seconds"
    }
    unset thread_done_waits

    # Wait for other thread to get into a ready state
    # again before terminating it. Give this a long
    # time to work, just in case.

    after 5000 "set done 1"
    vwait done

    java::call tcl.lang.TJCThread terminateThread

    # wait for thread to die
    after 2000 "set done 1"
    vwait done

    # Don't include binary class file output in test
    set results $_TJC($filename)

    list \
        [lindex $results 0] \
        [lindex $results 2] \
        [lindex $results 4] \
        [java::call tcl.lang.TJCThread getEventLog]
} [list OK Test.java Test \
{thread create
thread start
thread wait
compileJavaSource Test.java
notify in compileJavaSource
thread wakeup
process event
Interp() and init
process java source: Test.java
thread wait
terminateThread
notify in terminateThread
thread terminate request
thread terminated
}]

tcltest::test tjcthread-1.6 {compile 2 test classes} {
    catch {unset _TJC}

    java::call tcl.lang.TJCThread debugSetup "-event"

    set file1 Test.java
    set file2 Test2.java

    java::call tcl.lang.TJCThread startThread

    # Give the thread a moment to start up...
    while {![java::call tcl.lang.TJCThread isThreadReady]} {
        after 1000 "set done 1"
        vwait done
    }

    java::call tcl.lang.TJCThread compileJavaSource \
        $file1 \
        "public class Test {}" \
        [java::new tcl.lang.TJCReadyVar \
            [java::getinterp] \
            _TJC($file1) \
        ]
    java::call tcl.lang.TJCThread compileJavaSource \
        $file2 \
        "public class Test2 {}" \
        [java::new tcl.lang.TJCReadyVar \
            [java::getinterp] \
            _TJC($file2) \
        ]

    # update so var gets set to {}.
    # Note that the compile event could have
    # been run in the other thread so the
    # compile result var could get set here.
    update

    # If not processed, then set a timeout and wait
    # until the compile finishes.

    if {$_TJC($file2) == {}} {
        set id [after $TIMEOUT "set _TJC($file2) TIMEOUT"]
        vwait _TJC($file2)
        after cancel $id
    }

    # Wait for other thread to get into a ready state
    # again before terminating it.
    after 2000 "set done 1"
    vwait done

    java::call tcl.lang.TJCThread terminateThread

    # wait for thread to die
    after 2000 "set done 1"
    vwait done

    # Don't include binary class file output in test
    set r1 $_TJC($file1)
    set r2 $_TJC($file2)

    # There is a race condition having to do with if
    # the other thread runs between the first and
    # second call to compileJavaSource. Make the
    # test pass if any of the following log output
    # buffers are matched.

    set log1 \
{thread create
thread start
thread wait
compileJavaSource Test.java
notify in compileJavaSource
compileJavaSource Test2.java
notify in compileJavaSource
thread wakeup
process event
Interp() and init
process java source: Test.java
process event
process java source: Test2.java
thread wait
terminateThread
notify in terminateThread
thread terminate request
thread terminated
}

    set log2 \
{thread create
thread start
thread wait
compileJavaSource Test.java
notify in compileJavaSource
thread wakeup
process event
Interp() and init
compileJavaSource Test2.java
notify in compileJavaSource
process java source: Test.java
process event
process java source: Test2.java
thread wait
terminateThread
notify in terminateThread
thread terminate request
thread terminated
}

    set log3 \
{thread create
thread start
thread wait
compileJavaSource Test.java
notify in compileJavaSource
thread wakeup
process event
Interp() and init
process java source: Test.java
compileJavaSource Test2.java
notify in compileJavaSource
process event
process java source: Test2.java
thread wait
terminateThread
notify in terminateThread
thread terminate request
thread terminated
}

    set log [java::call tcl.lang.TJCThread getEventLog]
    set log_match 0
    if {$log == $log1} {
        #puts "log 1 matched"
        set log_match 1
    } elseif {$log == $log2} {
        #puts "log 2 matched"
        set log_match 1
    } elseif {$log == $log3} {
        #puts "log 3 matched"
        set log_match 1
    } else {
        puts "log match failed for log:\n$log"
    }

    list \
        [lindex $r1 0] \
        [lindex $r1 2] \
        [lindex $r1 4] \
        [lindex $r2 0] \
        [lindex $r2 2] \
        [lindex $r2 4] \
        $log_match
} {OK Test.java Test OK Test2.java Test2 1}


tcltest::test tjcthread-1.7 {compile test class with inner class} {
    catch {unset _TJC}

    java::call tcl.lang.TJCThread debugSetup "-event"

    set filename Test.java
    set jsrc "public class Test { class Inner {} }"

    java::call tcl.lang.TJCThread startThread
    # Give the thread a moment to start up...
    while {![java::call tcl.lang.TJCThread isThreadReady]} {
        after 1000 "set done 1"
        vwait done
    }
    java::call tcl.lang.TJCThread compileJavaSource \
        $filename \
        $jsrc \
        [java::new tcl.lang.TJCReadyVar \
            [java::getinterp] \
            _TJC($filename) \
        ]

    # update so var gets set to {}.
    # Note that the compile event could have
    # been run in the other thread so the
    # compile result var could get set here.

    update

    # If not processed, then set a timeout and wait
    # until the compile finishes.

    if {$_TJC($filename) == {}} {
        set id [after $TIMEOUT "set _TJC($filename) TIMEOUT"]
        vwait _TJC($filename)
        after cancel $id
    }

    # Wait for other thread to get into a ready state
    # again before terminating it.
    after 2000 "set done 1"
    vwait done

    java::call tcl.lang.TJCThread terminateThread

    # wait for thread to die
    after 2000 "set done 1"
    vwait done

    # Don't include binary class file output in test
    set results $_TJC($filename)

    set class_names [lindex $results 4]
    # class_names might not be known, names could be {}
    if {$class_names == {{} {}} ||
        $class_names == {Test {Test$Inner}}} {
        set class_pass 1
    } else {
        set class_pass 0
    }

    list \
        [lindex $results 0] \
        [lindex $results 2] \
        $class_pass \
        [java::call tcl.lang.TJCThread getEventLog]
} [list OK Test.java 1 \
{thread create
thread start
thread wait
compileJavaSource Test.java
notify in compileJavaSource
thread wakeup
process event
Interp() and init
process java source: Test.java
thread wait
terminateThread
notify in terminateThread
thread terminate request
thread terminated
}]





tcltest::test tjcthread-2.0 {compile test class, load byte code, invoke method} {
    catch {unset _TJC}

    set filename tjc/compileloadtest/Test.java

    set jsrc {
package tjc.compileloadtest;

public class Test {
    public static String call() {
        return "OK";
    }
}
}

    java::call tcl.lang.TJCThread startThread
    java::call tcl.lang.TJCThread compileJavaSource \
        $filename \
        $jsrc \
        [java::new tcl.lang.TJCReadyVar \
            [java::getinterp] \
            _TJC($filename) \
        ]

    # update so var gets set to {}.
    # Note that the compile event could have
    # been run in the other thread so the
    # compile result var could get set here.

    update

    # If not processed, then set a timeout and wait
    # until the compile finishes.

    if {$_TJC($filename) == {}} {
        set id [after $TIMEOUT "set _TJC($filename) TIMEOUT"]
        vwait _TJC($filename)
        after cancel $id
    }

    java::call tcl.lang.TJCThread terminateThread

    # wait for thread to die
    after 2000 "set done 1"
    vwait done

    # get result data, then load the generated class
    # file data using this interp's class loader.

    set results [list]

    set compile_results $_TJC($filename)
    set status [lindex $compile_results 0]
    if {$status == "OK"} {
        set class_data [lindex $compile_results 5 0]
        set class_object [java::defineclass $class_data]
        if {![java::isnull $class_object]} {
            lappend results "defined [$class_object toString]"
            lappend results [java::call tjc.compileloadtest.Test call]
        } else {
            set class_name [lindex $compile_results 4 0]
            lappend results "could not define class \"$class_name\""
        }
    } else {
        set results "COMPILE FAILED"
    }

    set results
} {{defined class tjc.compileloadtest.Test} OK}


tcltest::test tjcthread-2.1 {compile test class that imports tcl.lang.Interp} {
    catch {unset _TJC}

    set filename tjc/compileloadtest/Test2.java
    #puts "tjcthread-2.1: $filename"

    set jsrc {
package tjc.compileloadtest;
import tcl.lang.*;

public class Test2 {
    Interp interpObj = null;          // From jacl.jar
    TclInteger integerObj = null;     // From tcljava.jar
    int tjcInt = TJC.EXPR_OP_EQUAL;   // from tjc.jar

    public static String call() {
        return "OK";
    }
}
}

    java::call tcl.lang.TJCThread debugSetup "-event"

    java::call tcl.lang.TJCThread startThread
    java::call tcl.lang.TJCThread compileJavaSource \
        $filename \
        $jsrc \
        [java::new tcl.lang.TJCReadyVar \
            [java::getinterp] \
            _TJC($filename) \
        ]

    # update so var gets set to {}.
    # Note that the compile event could have
    # been run in the other thread so the
    # compile result var could get set here.

    update

    # If not processed, then set a timeout and wait
    # until the compile finishes.

    if {$_TJC($filename) == {}} {
        set id [after $TIMEOUT "set _TJC($filename) TIMEOUT"]
        #puts "waiting for _TJC($filename)"
        vwait _TJC($filename)
        #puts "done waiting for _TJC($filename): $_TJC($filename)"
        after cancel $id
    }

    java::call tcl.lang.TJCThread terminateThread

    # wait for thread to die
    after 2000 "set done 1"
    vwait done

    # get result data, then load the generated class
    # file data using this interp's class loader.

    set results [list]

    set compile_results $_TJC($filename)
    set status [lindex $compile_results 0]
    if {$status == "OK"} {
        set class_data [lindex $compile_results 5 0]
        set class_object [java::defineclass $class_data]
        if {![java::isnull $class_object]} {
            lappend results "defined [$class_object toString]"
            lappend results [java::call tjc.compileloadtest.Test2 call]
        } else {
            set class_name [lindex $compile_results 4 0]
            lappend results "could not define class \"$class_name\""
        }
    } else {
        set results "COMPILE FAILED : $status \"[lindex $compile_results 6]\""
    }

    set results
} {{defined class tjc.compileloadtest.Test2} OK}




tcltest::test tjcthread-3.0 {compile Tcl source code into Java byte code} {
    catch {unset _TJC}

    set filename TjcthreadTest30Cmd.java

    set proc_source {
proc tjcthread_test_3_0 {} {
    return OK
}
}


    # Note that the janino compiler does not seem to function
    # correctly currently, only pizza works.

    #java::call tcl.lang.TJCThread debugSetup "-event -pizza"
    #java::call tcl.lang.TJCThread debugSetup "-event -janino"

    java::call tcl.lang.TJCThread startThread
    java::call tcl.lang.TJCThread compileTclSource \
        $filename \
        $proc_source \
        [java::new tcl.lang.TJCReadyVar \
            [java::getinterp] \
            _TJC($filename) \
        ]

    # update so var gets set to {}.
    # Note that the compile event could have
    # been run in the other thread so the
    # compile result var could get set here.

    update

    # If not processed, then set a timeout and wait
    # until the compile finishes.

    if {$_TJC($filename) == {}} {
        set id [after $TIMEOUT "set _TJC($filename) TIMEOUT"]
        vwait _TJC($filename)
        after cancel $id
    }

    java::call tcl.lang.TJCThread terminateThread

    # wait for thread to die
    after 2000 "set done 1"
    vwait done

    # get result data, then load the generated class
    # file data using this interp's class loader.

    set results [list]

    set compile_results $_TJC($filename)
    set status [lindex $compile_results 0]
    if {$status == "OK"} {
        # Name of generated proc in GENINFO
        lappend results [lindex $compile_results 1]
        # Name of Java source file in FILENAME
        lappend results [string equal $filename \
            [lindex $compile_results 2]]
        # Don't report SRCCODE here.
        lappend results {}

        set class_data [lindex $compile_results 5 0]
        set class_object [java::defineclass $class_data]
        if {![java::isnull $class_object]} {
            lappend results "defined [$class_object toString]"
            # Define the class and then create a Tcl command
            # that invokes this compiled class cmdProc().
            # The real code will replace an existing definition
            # with this compiled command definition.

            set instance [$class_object newInstance]
            if {![java::instanceof $instance tcl.lang.Command]} {
                lappend results "NOT_COMMAND_INSTANCE"
            } else {
                # $instance is a TJC compiled command, install it.
                TJC::command "tjcthread_test_3_0" \
                    [$class_object getName]
                lappend results [tjcthread_test_3_0]
            }
        } else {
            set class_name [lindex $compile_results 4 0]
            lappend results "could not define class \"$class_name\""
        }
    } else {
        set results "COMPILE FAILED"
    }

    if {[info commands tjcthread_test_3_0] == "tjcthread_test_3_0"} {
        rename tjcthread_test_3_0 {}
    }
    set results
} {tjcthread_test_3_0 1 {} {defined class TjcthreadTest30Cmd} OK}


# The following tests make use of the TJC::compile API.
# This API will start the TJCThread if it is not already
# running, but it does not shut the thread down.

tcltest::test tjcthread-4.0 {use TJC::compile command to compile
        a Tcl proc into byte code and then replace the existing
        Tcl proc implementation with the compiled byte code
        implementation} {

    set results [list]

    # Define Tcl proc
    proc tjcthread_40_hello {} {
        return HELLO
    }

    lappend results [tjcthread_40_hello]

    proc tjcthread_40_ready { status cmd msg } {
        global results
        #puts "tjcthread_40_ready $status $cmd \"$msg\""
        if {$status == "OK"} {
            lappend results [list COMPILED $cmd]
        } else {
            lappend results "ERROR: $msg"
        }
    }

    TJC::compile tjcthread_40_hello -readycmd tjcthread_40_ready
    # Wait for status callback to be invoked
    #puts "waiting for results to change"
    vwait results
    #puts "done waiting for results to change"

    # Now invoke the compiled version of the command
    lappend results [tjcthread_40_hello]

    rename tjcthread_40_hello {}
    rename tjcthread_40_ready {}
    set results
} {HELLO {COMPILED ::tjcthread_40_hello} HELLO}



tcltest::test tjcthread-4.1 {use TJC::compile command to compile
        a Tcl proc into byte code and then replace the existing
        Tcl proc implementation with the compiled byte code
        implementation} {

    set results [list]

    # Define Tcl proc
    proc tjcthread_41_hello {} {
        return HELLO
    }

    lappend results [tjcthread_41_hello]

    TJC::compile tjcthread_41_hello -readyvar __tjcthread_41_ready
    # Wait for status var to be set
    #puts "waiting for __tjcthread_41_ready to change"
    vwait __tjcthread_41_ready
    #puts "done waiting for __tjcthread_41_ready to change"
    lappend results $__tjcthread_41_ready

    # Now invoke the compiled version of the command
    lappend results [tjcthread_41_hello]

    rename tjcthread_41_hello {}
    set results
} {HELLO {OK ::tjcthread_41_hello {}} HELLO}


tcltest::test tjcthread-4.2 {use TJC::compile command to compile
        2 Tcl procs} {
    set results [list]

    # Define Tcl proc
    proc tjcthread_42_one {} {
        return ONE
    }
    proc tjcthread_42_two {} {
        return TWO
    }

    proc tjcthread_42_ready { status cmd msg } {
        global results
        if {$status == "OK"} {
            lappend results [list COMPILED $cmd]
        } else {
            lappend results ERROR
        }
    }

    TJC::compile tjcthread_42_one
    TJC::compile tjcthread_42_two -readycmd tjcthread_42_ready

    # Wait for status callback to be invoked
    #puts "waiting for results to change"
    vwait results
    #puts "done waiting for results to change"

    # Now invoke the compiled version of the command2
    lappend results [tjcthread_42_one]
    lappend results [tjcthread_42_two]

    rename tjcthread_42_one {}
    rename tjcthread_42_two {}
    rename tjcthread_42_ready {}
    set results
} {{COMPILED ::tjcthread_42_two} ONE TWO}



tcltest::test tjcthread-5.0 {use TJC::compile command to compile Java source} {
    set jclass tjc.compileloadtest.Test50
    set jsrc {
package tjc.compileloadtest;

public class Test50 {
    public static String call() {
        return "OK";
    }
}
}
    set jinfo [list $jclass $jsrc]

    set results [list]

    # Callback invoked with jclasses: a list of the fully
    # qualified Java class names.

    proc tjcthread_50_ready { status jclasses msg } {
        global results
        #puts "tjcthread_50_ready $status \{$jclasses\} \"$msg\""
        if {$status == "OK"} {
            lappend results [list COMPILED [llength $jclasses] $jclasses]
        } else {
            lappend results ERROR
        }
    }

    TJC::compile -java $jinfo -readycmd tjcthread_50_ready

    # Wait for status callback to be invoked
    #puts "waiting for results to change"
    vwait results
    #puts "done waiting for results to change"

    lappend results [java::call tjc.compileloadtest.Test50 call]
    set results
} {{COMPILED 1 tjc.compileloadtest.Test50} OK}


tcltest::test tjcthread-5.1 {use TJC::compile command to compile Java source files} {
    # This test checks for a class in the default package as well
    # as a file with an inner classes. It uses the -readyvar flag
    # for variable notification.
    set jclass Test51
    set jsrc {
public class Test51 {
    public static class Inner {
        public static String call() {
            return "OK";
        }
    }

    public static String call() {
        return Inner.call();
    }
}
}
    set jinfo [list $jclass $jsrc]

    set results [list]

    TJC::compile -java $jinfo -readyvar _tjcthread_51_ready

    # Wait for status callback to be invoked
    #puts "waiting for _tjcthread_51_ready to change"
    vwait _tjcthread_51_ready
    #puts "done waiting for _tjcthread_51_ready to change"

    # readyvar : STATUS JCLASSES MSG
    lappend results $_tjcthread_51_ready
    lappend results [java::call Test51 call]
    set results
} {{OK {Test51 {Test51$Inner}} {}} OK}


tcltest::test tjcthread-6.0 {use TJC::compile command to compile
        the same Tcl proc in two different interps, this test
        checks that using the same Java class name in two different
        ClassLoaders does not generate an error} {

    set results [list]

    set i1 [interp create]
    set i2 [interp create]
    
    foreach i [list $i1 $i2] {
        $i eval {
            proc tjcthread_60_hello {} {
                return HELLO
            }

            package require TJC
            TJC::compile tjcthread_60_hello -readyvar __tjcthread_60_ready
        }
    }

    # Wait for both compiles to finish

    foreach i [list $i1 $i2] {
        $i eval {
            vwait __tjcthread_60_ready
        }
        lappend results [$i eval {set __tjcthread_60_ready}]
    }

    # Invoke compiled versions of the command

    foreach i [list $i1 $i2] {
        lappend results [$i eval {tjcthread_60_hello}]
    }

    interp delete $i1
    interp delete $i2

    set results
} {{OK ::tjcthread_60_hello {}} {OK ::tjcthread_60_hello {}} HELLO HELLO}

tcltest::test tjcthread-6.1 {use TJC::compile command to compile
        a Tcl proc two times. The first compile will repace
        the proc with the compiled version. Then, redefine the
        original Tcl proc and try to compile it again. This tests
        the TJC::compile command implementation, it should check
        for an existing class via the TclClassLoader before starting
        a compile job} {

    set results [list]

    proc tjcthread_61_hello {} {
        return HELLO
    }

    TJC::compile tjcthread_61_hello -readyvar __tjcthread_61_ready
    vwait __tjcthread_61_ready
    lappend results $__tjcthread_61_ready
    lappend results [tjcthread_61_hello]

    lappend results [info procs tjcthread_61_hello]

    # Replace the compiled version with the original proc.

    proc tjcthread_61_hello {} {
        return HELLO
    }

    lappend results [info procs tjcthread_61_hello]

    # Attempt to compile proc a second time.
    # This should not fail because the TclClassLoader
    # sees a duplicate class declaration.

    TJC::compile tjcthread_61_hello -readyvar __tjcthread_61_ready
    vwait __tjcthread_61_ready

    lappend results $__tjcthread_61_ready
    lappend results [tjcthread_61_hello]
    lappend results [info procs tjcthread_61_hello]

    rename tjcthread_61_hello {}
    set results
} {{OK ::tjcthread_61_hello {}} HELLO {} tjcthread_61_hello {OK ::tjcthread_61_hello {}} HELLO {}}


tcltest::test tjcthread-6.2 {use TJC::compile command to compile
        a Tcl proc three times. This makes sure that multiple
        declarations of the same class name are checked} {

    set results [list]

    proc tjcthread_62_hello {} {
        return HELLO
    }

    TJC::compile tjcthread_62_hello -readyvar __tjcthread_62_ready
    vwait __tjcthread_62_ready
    lappend results $__tjcthread_62_ready
    lappend results [tjcthread_62_hello]

    lappend results [info procs tjcthread_62_hello]

    # Replace the compiled version with the original proc.

    proc tjcthread_62_hello {} {
        return HELLO
    }

    lappend results [info procs tjcthread_62_hello]

    # Attempt to compile proc a second time.
    # This should not fail because the TclClassLoader
    # sees a duplicate class declaration.

    TJC::compile tjcthread_62_hello -readyvar __tjcthread_62_ready
    vwait __tjcthread_62_ready

    lappend results $__tjcthread_62_ready
    lappend results [tjcthread_62_hello]
    lappend results [info procs tjcthread_62_hello]

    proc tjcthread_62_hello {} {
        return HELLO
    }

    # Attempt to compile proc a third time.
    # This should not fail because the TclClassLoader
    # sees a duplicate class declaration.

    TJC::compile tjcthread_62_hello -readyvar __tjcthread_62_ready
    vwait __tjcthread_62_ready

    lappend results $__tjcthread_62_ready
    lappend results [tjcthread_62_hello]
    lappend results [info procs tjcthread_62_hello]

    rename tjcthread_62_hello {}
    set results
} {{OK ::tjcthread_62_hello {}} HELLO {} tjcthread_62_hello {OK ::tjcthread_62_hello {}} HELLO {} {OK ::tjcthread_62_hello {}} HELLO {}}


# cleanup

foreach i [interp slaves] {
    interp delete $i
}

# Try to kill the TJCTread thread in case it is running
java::call tcl.lang.TJCThread terminateThread

# Clear event log data if it was used
java::call tcl.lang.TJCThread debugSetup ""

tcltest::cleanupTests

